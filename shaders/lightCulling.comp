#version 450

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_debug_printf : require
#include "common.glsl"

layout(local_size_x=TILE_SIZE, local_size_y=TILE_SIZE, local_size_z=1) in;

layout(set = 0, binding = 0) uniform Camera
{
	mat4 vp;
	vec3 cameraPosition;
};
layout(push_constant) uniform PC
{
	ivec2 viewportSize;
	ivec2 tileNums;
	int lightNum;
	int debugMode;
};

// we use these buffers later in the frag shader, and they only change once per frame, so they can go with the camera in set 0
layout(set = 0, binding = 1, std430) readonly buffer LightBuffer
{
	Light lights[];
};

layout(set = 0, binding = 2) writeonly buffer VisibleLightsBuffer
{
	TileLights visibleLights[];
};

layout(set = 0, binding = 3) uniform sampler2D depthTexture;

layout(set = 0, binding = 4, rgba8) uniform writeonly image2D debugTexture;


struct ViewFrustum
{
	vec4 planes[6];
	vec3 points[8]; // 0-3 near 4-7 far

	vec4 boundingSphere;
};


shared float minDepth;
shared float maxDepth;
shared ViewFrustum frustum;
shared uint lightCountForTile;


ViewFrustum BuildFrustum(ivec2 tileID)
{
	mat4 inverseVP = inverse(vp);

	vec2 ndcSizePerTile = 2.0 * vec2(TILE_SIZE, -TILE_SIZE) / viewportSize;

	// TODO maybe have a problem with the top left of vulkan ndc since we are using negative viewport
	vec2 ndcPoints[4];  // corners of tile in ndc
	ndcPoints[0] = vec2(-1.0, 1.0) + tileID * ndcSizePerTile;  // upper left
	ndcPoints[1] = vec2(ndcPoints[0].x + ndcSizePerTile.x, ndcPoints[0].y); // upper right
	ndcPoints[2] = vec2(ndcPoints[0].x + ndcSizePerTile.x, ndcPoints[0].y + ndcSizePerTile.y);// lower right
	ndcPoints[3] = vec2(ndcPoints[0].x					 , ndcPoints[0].y + ndcSizePerTile.y); // lower left

	ViewFrustum frustum;

	vec4 temp;

	temp = inverseVP * vec4(ndcPoints[0].x + ndcSizePerTile.x / 2.0, ndcPoints[0].y - ndcSizePerTile.y / 2.0, (maxDepth - minDepth) / 2.0, 1.0);

	vec3 center = temp.xyz / (temp.w + 0.0000152587);
	for (int i = 0; i < 4; i++)
	{
		temp = inverseVP * vec4(ndcPoints[i], maxDepth, 1.0); //thse are the near ones actually because we are using reverse Z
		float w = temp.w + 0.0000152587;
		frustum.points[i] = temp.xyz / w;

		//debugPrintfEXT("Point: %f, %f, %f : %f, %f, %f", ndcPoints[i].x, ndcPoints[i].y, minDepth, frustum.points[i].x, frustum.points[i].y, frustum.points[i].z);
		temp = inverseVP * vec4(ndcPoints[i], minDepth, 1.0);
		w = temp.w + 0.0000152587;
		frustum.points[i + 4] = temp.xyz / (w);
	}

	frustum.boundingSphere = vec4(center, sqrt(dot(frustum.points[0] - center, frustum.points[0] - center)));

	vec3 normal;
	for (int i = 0; i < 4; i++)
	{
		//Cax+Cby+Ccz+Cd = 0, planes[i] = (Ca, Cb, Cc, Cd)
		normal = cross(frustum.points[i] - cameraPosition, frustum.points[i + 1] - cameraPosition);
		normal = normalize(normal);
		frustum.planes[i] = vec4(normal, - dot(normal, frustum.points[i]));
	}
	// near plane
	{
		normal = cross(frustum.points[1] - frustum.points[0], frustum.points[3] - frustum.points[0]);
		normal = normalize(normal);
		frustum.planes[4] = vec4(normal, - dot(normal, frustum.points[0]));
	}
	// far plane
	{
		normal = cross(frustum.points[7] - frustum.points[4], frustum.points[5] - frustum.points[4]);
		normal = normalize(normal);
		frustum.planes[5] = vec4(normal, - dot(normal, frustum.points[4]));
	}

	return frustum;
}

bool ConeInFrustumSphere(Light light)
{
    vec3 V = frustum.boundingSphere.xyz - light.position;
    float  VlenSq = dot(V, V);
    float  V1len  = dot(V, light.direction);
    float  distanceClosestPoint = cos(light.cutoff) * sqrt(VlenSq - V1len*V1len) - V1len * sin(light.cutoff);

    bool angleCull = distanceClosestPoint > frustum.boundingSphere.w;
    bool frontCull = V1len >  frustum.boundingSphere.w + light.range;
    bool backCull  = V1len < -frustum.boundingSphere.w;
	return !(angleCull || frontCull || backCull);

}
bool ConeAbovePlane(vec3 origin, vec3 forward, float cutoff, float size, vec4 plane)
{
	vec3 V1 = cross(plane.xyz, forward);
    vec3 V2 = cross(V1, forward);

    vec3 capRimPoint =  origin +
                                size * cos(cutoff) * forward +
                                size * sin(cutoff) * V2;

    return dot(vec4(capRimPoint, 1.0f), plane) >= 0.0f || dot(vec4(origin, 1.0f), plane) >= 0.0f;
}
bool InFrustum(Light light)
{
	for(int i = 0; i < 6; i++)
	{
		if(dot(light.position, frustum.planes[i].xyz) + frustum.planes[i].w < -light.range)
		{
			return false;
		}
	}
	return true;

	if(light.type == DIRECTIONAL_LIGHT)
		return true;

	if(light.type == POINT_LIGHT)
	{

		for(int i = 0; i < 6; i++)
		{
			if(dot(light.position, frustum.planes[i].xyz) + frustum.planes[i].w < -light.range)
			{
				return false;
			}
		}
		return true;
	}

	else
	{
		if(!ConeInFrustumSphere(light)) // early out if the cone isn't even in the bounding sphere, but have to do plane tests because the bounding sphere can get huge if there are large depth discrepancies in the tile
			return false;


		for(int i = 0; i < 6; ++i)
		{
			if(!ConeAbovePlane(light.position, light.direction, light.cutoff, light.range, frustum.planes[i]))
				return false;
		}
		return true;
	}
}

void main()
{


	ivec2 tileID = ivec2(gl_WorkGroupID.xy);
	uint tileIndex = tileID.y * tileNums.x + tileID.x;


	if(gl_LocalInvocationIndex == 0)
	{

		minDepth = 1.0;
		maxDepth = 0.0;
		for(int x = 0; x < TILE_SIZE; ++x)
		{
			for(int y = 0; y < TILE_SIZE; ++y)
			{
				vec2 sampleLoc = (vec2(TILE_SIZE, TILE_SIZE) * tileID + vec2(x,y))/ viewportSize;

				float depth = texture(depthTexture, sampleLoc).x;


				minDepth = min(minDepth, depth); // this causes crash if we use msaa
				maxDepth = max(maxDepth, depth);
			}
		}



		frustum = BuildFrustum(tileID);



		lightCountForTile = 0;
		//debugPrintfEXT("%f, %f, %f, %f", frustum.planes[2].x, frustum.planes[2].y, frustum.planes[2].z, frustum.planes[2].w );
		//if(minDepth != 1.0)
		//	debugPrintfEXT("ID: %i, %i  , min: %f, max: %f", tileID.x, tileID.y, minDepth, maxDepth);
	}


	barrier();
	if(maxDepth == 0.0 && minDepth == 0.0)
		return;
	for(uint i = gl_LocalInvocationIndex; i < lightNum && lightCountForTile < MAX_LIGHTS_PER_TILE; i += gl_WorkGroupSize.x * gl_WorkGroupSize.y)
	{

//		bool accept = InFrustum(lights[i]);
//		uvec4 ballot = subgroupBallot(accept);
//
//		uint index = subgroupBallotExclusiveBitCount(ballot);
//
//		if(index >= MAX_LIGHTS_PER_TILE)
//			break;
//
//		if(accept)
//			visibleLights[tileIndex].indices[index] = i;
		bool accepted = InFrustum(lights[i]);
		if(accepted)
		{
			uint slot = atomicAdd(lightCountForTile, 1);
			if(slot >= MAX_LIGHTS_PER_TILE)
				break;

			visibleLights[tileIndex].indices[slot] = i;
		}


	}

	barrier();

	if(gl_LocalInvocationIndex == 0)
	{
		//debugPrintfEXT("Rejected: %i", rejected);
		uint lightCount = min(lightCountForTile, MAX_LIGHTS_PER_TILE);
		visibleLights[tileIndex].count = lightCount;
		if(debugMode == 1)
		{
			for(int x = 0; x < TILE_SIZE; ++x)
			{
				for(int y = 0; y < TILE_SIZE; ++y)
				{

					imageStore(debugTexture, ivec2(TILE_SIZE, TILE_SIZE) * tileID + ivec2(x, y), vec4(float(lightCount) / MAX_LIGHTS_PER_TILE, float(int(lightCount == MAX_LIGHTS_PER_TILE)), 0.0, 1.0));
				}
			}
		}


	}

}
